package Resort.Utility;

public class DatabaseInitializer {

//  public static String sqlInit = "create table if not exists ACCOUNTS\n"
//      + "(\n"
//      + "    ACCOUNTID        INTEGER auto_increment,\n"
//      + "    FIRSTNAME        VARCHAR not null,\n"
//      + "    LASTNAME         VARCHAR not null,\n"
//      + "    PASSWORD         VARCHAR not null,\n"
//      + "    USERNAME         VARCHAR\n"
//      + "        constraint ACCOUNTS_USERNAME_UINDEX\n"
//      + "            unique,\n"
//      + "    EMAIL            VARCHAR,\n"
//      + "    ADDRESS          VARCHAR,\n"
//      + "    STATE            VARCHAR,\n"
//      + "    ZIPCODE          VARCHAR,\n"
//      + "    CREDITCARDNUMBER VARCHAR,\n"
//      + "    CVV              VARCHAR,\n"
//      + "    ISMANAGER        BOOLEAN default FALSE,\n"
//      + "    CCEXPMONTH       VARCHAR,\n"
//      + "    CCEXPYEAR        VARCHAR\n"
//      + ");\n"
//      + "\n"
//      + "create unique index  if not exists ACCOUNT_ACCOUNTID_UINDEX\n"
//      + "    on ACCOUNTS (ACCOUNTID);\n"
//      + "\n"
//      + "create unique index  if not exists PRIMARY_KEY_6A\n"
//      + "    on ACCOUNTS (ACCOUNTID);\n"
//      + "\n"
//      + "alter table ACCOUNTS\n"
//      + "    add constraint if not exists ACCOUNT_PK\n"
//      + "        primary key (ACCOUNTID);\n"
//      + "\n"

  public static String sqlInit = "create table IF NOT EXISTS  ACCOUNTS\n"
      + "(\n"
      + "    ACCOUNTID        INTEGER auto_increment,\n"
      + "    FIRSTNAME        VARCHAR not null,\n"
      + "    LASTNAME         VARCHAR not null,\n"
      + "    PASSWORD         VARCHAR not null,\n"
      + "    USERNAME         VARCHAR\n"
      + "        constraint ACCOUNTS_USERNAME_UINDEX\n"
      + "            unique,\n"
      + "    EMAIL            VARCHAR,\n"
      + "    ADDRESS          VARCHAR,\n"
      + "    STATE            VARCHAR,\n"
      + "    ZIPCODE          VARCHAR,\n"
      + "    CREDITCARDNUMBER VARCHAR,\n"
      + "    CVV              VARCHAR,\n"
      + "    ISMANAGER        BOOLEAN default FALSE,\n"
      + "    CCEXPMONTH       VARCHAR,\n"
      + "    CCEXPYEAR        VARCHAR\n"
      + ");\n"
      + "\n"
      + "create unique index IF NOT EXISTS ACCOUNT_ACCOUNTID_UINDEX\n"
      + "    on ACCOUNTS (ACCOUNTID);\n"
      + "\n"
      + "create unique index IF NOT EXISTS PRIMARY_KEY_6A\n"
      + "    on ACCOUNTS (ACCOUNTID);\n"
      + "\n"
      + "alter table ACCOUNTS\n"
      + "     add constraint IF NOT EXISTS ACCOUNT_PK\n"
      + "         primary key (ACCOUNTID);\n"
      + "\n"
      + "create table IF NOT EXISTS ROOMTYPES\n"
      + "(\n"
      + "    ROOMTYPE        VARCHAR      not null\n"
      + "        primary key,\n"
      + "    ROOMDESCRIPTION VARCHAR(100) not null\n"
      + ");\n"
      + "\n"
      + "create table IF NOT EXISTS ROOMS\n"
      + "(\n"
      + "    ROOMNUMBER INTEGER auto_increment,\n"
      + "    ROOMTYPE   VARCHAR,\n"
      + "    constraint ROOMS_PK\n"
      + "        primary key (ROOMNUMBER),\n"
      + "    constraint ROOMTYPE\n"
      + "        foreign key (ROOMTYPE) references ROOMTYPES\n"
      + ");\n"
      + "\n"
      + "create table IF NOT EXISTS RESERVATIONS\n"
      + "(\n"
      + "    USERID        INTEGER,\n"
      + "    ROOMNUMBER    INTEGER,\n"
      + "    CHECKIN       DATE,\n"
      + "    CHECKOUT      DATE,\n"
      + "    RESERVATIONID INTEGER auto_increment,\n"
      + "    constraint RESERVATIONS_PK\n"
      + "        primary key (RESERVATIONID),\n"
      + "    constraint ROOMNUMBER\n"
      + "        foreign key (ROOMNUMBER) references ROOMS,\n"
      + "    constraint USERID\n"
      + "        foreign key (USERID) references ACCOUNTS\n"
      + ");\n"
      + "\n"
      + "create unique index IF NOT EXISTS RESERVATIONS_RESERVATIONID_UINDEX\n"
      + "    on RESERVATIONS (RESERVATIONID);\n"
      + "\n"
      + "\n"
      + "\n"
      + "\n"
      + "MERGE INTO PUBLIC.ACCOUNTS (ACCOUNTID, FIRSTNAME, LASTNAME, PASSWORD, USERNAME, EMAIL, ADDRESS, STATE, ZIPCODE, CREDITCARDNUMBER, CVV, ISMANAGER, CCEXPMONTH, CCEXPYEAR) VALUES (81, 'admin', 'admin', 'admin', 'admin', 'admin@admin.com', 'admin', 'admin', '12345', '1111111111111111', '123', true, '1', '2019');\n"
      + "\n"
      + "MERGE INTO PUBLIC.ROOMTYPES (ROOMTYPE, ROOMDESCRIPTION) VALUES ('Junior Condo', 'Economic 3 bedroom condo featuring a kitchen and living room');\n"
      + "MERGE INTO PUBLIC.ROOMTYPES (ROOMTYPE, ROOMDESCRIPTION) VALUES ('Ambassador Suite', 'Luxurious 5 bedroom Ocean view cabin.');\n"
      + "MERGE INTO PUBLIC.ROOMTYPES (ROOMTYPE, ROOMDESCRIPTION) VALUES ('Pool Side Condo', 'Pool side condo with 4 bedrooms a kitchen and a dining room');\n"
      + "MERGE INTO PUBLIC.ROOMTYPES (ROOMTYPE, ROOMDESCRIPTION) VALUES ('Eagle View Condo', 'Extravagant 4 bedroom condo showcasing a birds eye view of the city');"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (1, 'Ambassador Suite');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (2, 'Ambassador Suite');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (3, 'Pool Side Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (4, 'Pool Side Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (5, 'Pool Side Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (6, 'Pool Side Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (7, 'Pool Side Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (8, 'Eagle View Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (9, 'Eagle View Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (10, 'Eagle View Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (11, 'Eagle View Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (12, 'Eagle View Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (13, 'Junior Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (14, 'Junior Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (15, 'Junior Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (16, 'Junior Condo');\n"
      + "MERGE INTO PUBLIC.ROOMS (ROOMNUMBER, ROOMTYPE) VALUES (17, 'Junior Condo');\n"
      + "\n";
        ;
}
